# %%
import streamlit as st
from langchain import PromptTemplate
from langchain.llms import OpenAI
import streamlit.components.v1 as components

# Initialize OpenAI API key
template = """
    Going forward, I want you to act as a software architect and build C4 diagrams using mermaid.js. Keep the answers to markdown syntax and always keep in mind software functional and non-functional aspects including but not limited to scalability, availability, redundancy, containerization, security and disaster recovery.
    type: {graph_type}
    logic: {logic_input}
    lets think step by step
    response me in chinese
    YOUR {graph_type} RESPONSE :
"""

prompt = PromptTemplate(
    input_variables=["graph_type", "logic_input"],
    template=template,
)


def load_LLM(openai_api_key):
    """Logic for loading the chain you want to use should go here."""
    # Make sure your openai_api_key is set as an environment variable
    llm = OpenAI(temperature=.7, openai_api_key=openai_api_key)
    return llm


st.set_page_config(page_title="Globalize Email", page_icon=":robot:")
st.header("Chat Graph")
st.text("使用文字描述图表内容，生成对应的可视化图表")

col1, col2 = st.columns(2)

with col1:
    st.markdown("""
        ### 使用示例
        我有三个项目 项目一占比时间30% 项目二占比50% 其余的是项目三
        ### 生成的markdown代码
        ```mermaid
        pie 
        "项目一" : 30
        "项目二" : 50
        "项目三" : 20
        ```
        """)

with col2:
    st.image(
        image='example.jpeg',
        width=500,
        caption='Example of a pie chart generated by Globalize Text')

st.markdown("## 请输入内容：")


def get_api_key():
    input_text = st.text_input(label="OpenAI API Key ",
                               placeholder="Ex: sk-2twmA8tfCb8un4...",
                               key="openai_api_key_input")
    return input_text


# openai_api_key = get_api_key()
openai_api_key = "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"

col1, col2 = st.columns(2)
graph_type = ""
with col1:
    graph_type = st.selectbox(
        '你想要绘制什么样的图表', ('流程图', '序列图', '甘特图', '饼图', '时间线', "classDiagram"))


def get_text():
    input_text = st.text_area(label="请输入你要绘制的图表逻辑",
                              placeholder="Your Email...",
                              key="logic_input")
    return input_text


logic_input = get_text()

if len(logic_input.split(" ")) > 700:
    st.write("Please enter a shorter email. The maximum length is 700 words.")
    st.stop()


def update_text_with_example():
    print("in updated")
    graph_type = "classDiagram"
    st.session_state.logic_input = "我有一个博客系统，包含用户，博客，评论三个模块,describe the data model in more detail or tabular format using markdown,然后使用meimaid语法绘制classDiagram"


st.button("*查看示例*",
          type='secondary',
          help="Click to see an example of the email you will be converting.",
          on_click=update_text_with_example)


def mermaid(code: str) -> None:
    components.html(f"""
        <pre class="mermaid" style="width: 100%; height: 500px; border:1px solid black; ">
            {code}
        </pre>
        <style>
            .mermaid svg{{
                height: 100%;
            }}
        </style>
        <script type="module">
            import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';
            mermaid.initialize({{ startOnLoad: true }});
            import svgPanZoom from 'https://cdn.jsdelivr.net/npm/svg-pan-zoom@3.6.1/+esm';
           
            setTimeout(() => {{
                var svgElement = document.querySelector('.mermaid svg'); 
                var panZoomTiger = svgPanZoom(svgElement,{{zoomEnabled: true,
          controlIconsEnabled: true,
          fit: true,
          center: true,}})
            }}, 1000)
        </script>
        """,
                    height=600)


def handle_submit():
    print("in handle submit")
    if not logic_input:
        st.warning('请填写图表逻辑. ', icon="⚠️")
        return
    if logic_input:
        if not openai_api_key:
            print("in handle submit error")

            st.warning(
                'Please insert OpenAI API Key. Instructions [here](https://help.openai.com/en/articles/4936850-where-do-i-find-my-secret-api-key)',
                icon="⚠️")
            st.stop()

        llm = load_LLM(openai_api_key=openai_api_key)

        prompt_with_email = prompt.format(graph_type=graph_type,
                                          logic_input=logic_input)
        print(prompt_with_email)
        formatted_result = llm(prompt_with_email)
        print(formatted_result)
        # st.write(formatted_result)
        # st.text(formatted_result)
        # st.markdown(formatted_result)
        st.session_state.result = formatted_result
        result_slot.markdown(formatted_result)


# 增加一个按钮，点击后，将输入的内容，转换成对应的格式
st.button("Convert",
          type='primary',
          help="Click to convert your email.",
          on_click=handle_submit)


result_slot = st.empty()
if 'result' in st.session_state:
    result_slot.markdown(st.session_state.result)


def process_result(text):
    # 去除markdown 的code格式 ```xxx```正则
    import re
    text = re.sub(r'(```.*\n?)', '', text)
    # text = text.replace("```", "")
    print(text)
    return text




if 'result' in st.session_state:
    st.markdown("### 可视化图表，可以滚动和拖拽:")
    mermaid(process_result(st.session_state.result))
# %%
